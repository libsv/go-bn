// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/libsv/go-bn"
	"github.com/libsv/go-bn/models"
	"github.com/libsv/go-bt/v2"
	"sync"
)

// Ensure, that TransactionClientMock does implement bn.TransactionClient.
// If this is not the case, regenerate this file with moq.
var _ bn.TransactionClient = &TransactionClientMock{}

// TransactionClientMock is a mock implementation of bn.TransactionClient.
//
// 	func TestSomethingThatUsesTransactionClient(t *testing.T) {
//
// 		// make and configure a mocked bn.TransactionClient
// 		mockedTransactionClient := &TransactionClientMock{
// 			CreateRawTransactionFunc: func(ctx context.Context, utxos bt.UTXOs, params models.ParamsCreateRawTransaction) (*bt.Tx, error) {
// 				panic("mock out the CreateRawTransaction method")
// 			},
// 			FundRawTransactionFunc: func(ctx context.Context, tx *bt.Tx, opts *models.OptsFundRawTransaction) (*models.FundRawTransaction, error) {
// 				panic("mock out the FundRawTransaction method")
// 			},
// 			RawTransactionFunc: func(ctx context.Context, txID string) (*bt.Tx, error) {
// 				panic("mock out the RawTransaction method")
// 			},
// 			SendRawTransactionFunc: func(ctx context.Context, tx *bt.Tx, opts *models.OptsSendRawTransaction) (string, error) {
// 				panic("mock out the SendRawTransaction method")
// 			},
// 			SignRawTransactionFunc: func(ctx context.Context, tx *bt.Tx, opts *models.OptsSignRawTransaction) (*models.SignedRawTransaction, error) {
// 				panic("mock out the SignRawTransaction method")
// 			},
// 		}
//
// 		// use mockedTransactionClient in code that requires bn.TransactionClient
// 		// and then make assertions.
//
// 	}
type TransactionClientMock struct {
	// CreateRawTransactionFunc mocks the CreateRawTransaction method.
	CreateRawTransactionFunc func(ctx context.Context, utxos bt.UTXOs, params models.ParamsCreateRawTransaction) (*bt.Tx, error)

	// FundRawTransactionFunc mocks the FundRawTransaction method.
	FundRawTransactionFunc func(ctx context.Context, tx *bt.Tx, opts *models.OptsFundRawTransaction) (*models.FundRawTransaction, error)

	// RawTransactionFunc mocks the RawTransaction method.
	RawTransactionFunc func(ctx context.Context, txID string) (*bt.Tx, error)

	// SendRawTransactionFunc mocks the SendRawTransaction method.
	SendRawTransactionFunc func(ctx context.Context, tx *bt.Tx, opts *models.OptsSendRawTransaction) (string, error)

	// SignRawTransactionFunc mocks the SignRawTransaction method.
	SignRawTransactionFunc func(ctx context.Context, tx *bt.Tx, opts *models.OptsSignRawTransaction) (*models.SignedRawTransaction, error)

	// calls tracks calls to the methods.
	calls struct {
		// CreateRawTransaction holds details about calls to the CreateRawTransaction method.
		CreateRawTransaction []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Utxos is the utxos argument value.
			Utxos bt.UTXOs
			// Params is the params argument value.
			Params models.ParamsCreateRawTransaction
		}
		// FundRawTransaction holds details about calls to the FundRawTransaction method.
		FundRawTransaction []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Tx is the tx argument value.
			Tx *bt.Tx
			// Opts is the opts argument value.
			Opts *models.OptsFundRawTransaction
		}
		// RawTransaction holds details about calls to the RawTransaction method.
		RawTransaction []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// TxID is the txID argument value.
			TxID string
		}
		// SendRawTransaction holds details about calls to the SendRawTransaction method.
		SendRawTransaction []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Tx is the tx argument value.
			Tx *bt.Tx
			// Opts is the opts argument value.
			Opts *models.OptsSendRawTransaction
		}
		// SignRawTransaction holds details about calls to the SignRawTransaction method.
		SignRawTransaction []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Tx is the tx argument value.
			Tx *bt.Tx
			// Opts is the opts argument value.
			Opts *models.OptsSignRawTransaction
		}
	}
	lockCreateRawTransaction sync.RWMutex
	lockFundRawTransaction   sync.RWMutex
	lockRawTransaction       sync.RWMutex
	lockSendRawTransaction   sync.RWMutex
	lockSignRawTransaction   sync.RWMutex
}

// CreateRawTransaction calls CreateRawTransactionFunc.
func (mock *TransactionClientMock) CreateRawTransaction(ctx context.Context, utxos bt.UTXOs, params models.ParamsCreateRawTransaction) (*bt.Tx, error) {
	if mock.CreateRawTransactionFunc == nil {
		panic("TransactionClientMock.CreateRawTransactionFunc: method is nil but TransactionClient.CreateRawTransaction was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Utxos  bt.UTXOs
		Params models.ParamsCreateRawTransaction
	}{
		Ctx:    ctx,
		Utxos:  utxos,
		Params: params,
	}
	mock.lockCreateRawTransaction.Lock()
	mock.calls.CreateRawTransaction = append(mock.calls.CreateRawTransaction, callInfo)
	mock.lockCreateRawTransaction.Unlock()
	return mock.CreateRawTransactionFunc(ctx, utxos, params)
}

// CreateRawTransactionCalls gets all the calls that were made to CreateRawTransaction.
// Check the length with:
//     len(mockedTransactionClient.CreateRawTransactionCalls())
func (mock *TransactionClientMock) CreateRawTransactionCalls() []struct {
	Ctx    context.Context
	Utxos  bt.UTXOs
	Params models.ParamsCreateRawTransaction
} {
	var calls []struct {
		Ctx    context.Context
		Utxos  bt.UTXOs
		Params models.ParamsCreateRawTransaction
	}
	mock.lockCreateRawTransaction.RLock()
	calls = mock.calls.CreateRawTransaction
	mock.lockCreateRawTransaction.RUnlock()
	return calls
}

// FundRawTransaction calls FundRawTransactionFunc.
func (mock *TransactionClientMock) FundRawTransaction(ctx context.Context, tx *bt.Tx, opts *models.OptsFundRawTransaction) (*models.FundRawTransaction, error) {
	if mock.FundRawTransactionFunc == nil {
		panic("TransactionClientMock.FundRawTransactionFunc: method is nil but TransactionClient.FundRawTransaction was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Tx   *bt.Tx
		Opts *models.OptsFundRawTransaction
	}{
		Ctx:  ctx,
		Tx:   tx,
		Opts: opts,
	}
	mock.lockFundRawTransaction.Lock()
	mock.calls.FundRawTransaction = append(mock.calls.FundRawTransaction, callInfo)
	mock.lockFundRawTransaction.Unlock()
	return mock.FundRawTransactionFunc(ctx, tx, opts)
}

// FundRawTransactionCalls gets all the calls that were made to FundRawTransaction.
// Check the length with:
//     len(mockedTransactionClient.FundRawTransactionCalls())
func (mock *TransactionClientMock) FundRawTransactionCalls() []struct {
	Ctx  context.Context
	Tx   *bt.Tx
	Opts *models.OptsFundRawTransaction
} {
	var calls []struct {
		Ctx  context.Context
		Tx   *bt.Tx
		Opts *models.OptsFundRawTransaction
	}
	mock.lockFundRawTransaction.RLock()
	calls = mock.calls.FundRawTransaction
	mock.lockFundRawTransaction.RUnlock()
	return calls
}

// RawTransaction calls RawTransactionFunc.
func (mock *TransactionClientMock) RawTransaction(ctx context.Context, txID string) (*bt.Tx, error) {
	if mock.RawTransactionFunc == nil {
		panic("TransactionClientMock.RawTransactionFunc: method is nil but TransactionClient.RawTransaction was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		TxID string
	}{
		Ctx:  ctx,
		TxID: txID,
	}
	mock.lockRawTransaction.Lock()
	mock.calls.RawTransaction = append(mock.calls.RawTransaction, callInfo)
	mock.lockRawTransaction.Unlock()
	return mock.RawTransactionFunc(ctx, txID)
}

// RawTransactionCalls gets all the calls that were made to RawTransaction.
// Check the length with:
//     len(mockedTransactionClient.RawTransactionCalls())
func (mock *TransactionClientMock) RawTransactionCalls() []struct {
	Ctx  context.Context
	TxID string
} {
	var calls []struct {
		Ctx  context.Context
		TxID string
	}
	mock.lockRawTransaction.RLock()
	calls = mock.calls.RawTransaction
	mock.lockRawTransaction.RUnlock()
	return calls
}

// SendRawTransaction calls SendRawTransactionFunc.
func (mock *TransactionClientMock) SendRawTransaction(ctx context.Context, tx *bt.Tx, opts *models.OptsSendRawTransaction) (string, error) {
	if mock.SendRawTransactionFunc == nil {
		panic("TransactionClientMock.SendRawTransactionFunc: method is nil but TransactionClient.SendRawTransaction was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Tx   *bt.Tx
		Opts *models.OptsSendRawTransaction
	}{
		Ctx:  ctx,
		Tx:   tx,
		Opts: opts,
	}
	mock.lockSendRawTransaction.Lock()
	mock.calls.SendRawTransaction = append(mock.calls.SendRawTransaction, callInfo)
	mock.lockSendRawTransaction.Unlock()
	return mock.SendRawTransactionFunc(ctx, tx, opts)
}

// SendRawTransactionCalls gets all the calls that were made to SendRawTransaction.
// Check the length with:
//     len(mockedTransactionClient.SendRawTransactionCalls())
func (mock *TransactionClientMock) SendRawTransactionCalls() []struct {
	Ctx  context.Context
	Tx   *bt.Tx
	Opts *models.OptsSendRawTransaction
} {
	var calls []struct {
		Ctx  context.Context
		Tx   *bt.Tx
		Opts *models.OptsSendRawTransaction
	}
	mock.lockSendRawTransaction.RLock()
	calls = mock.calls.SendRawTransaction
	mock.lockSendRawTransaction.RUnlock()
	return calls
}

// SignRawTransaction calls SignRawTransactionFunc.
func (mock *TransactionClientMock) SignRawTransaction(ctx context.Context, tx *bt.Tx, opts *models.OptsSignRawTransaction) (*models.SignedRawTransaction, error) {
	if mock.SignRawTransactionFunc == nil {
		panic("TransactionClientMock.SignRawTransactionFunc: method is nil but TransactionClient.SignRawTransaction was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Tx   *bt.Tx
		Opts *models.OptsSignRawTransaction
	}{
		Ctx:  ctx,
		Tx:   tx,
		Opts: opts,
	}
	mock.lockSignRawTransaction.Lock()
	mock.calls.SignRawTransaction = append(mock.calls.SignRawTransaction, callInfo)
	mock.lockSignRawTransaction.Unlock()
	return mock.SignRawTransactionFunc(ctx, tx, opts)
}

// SignRawTransactionCalls gets all the calls that were made to SignRawTransaction.
// Check the length with:
//     len(mockedTransactionClient.SignRawTransactionCalls())
func (mock *TransactionClientMock) SignRawTransactionCalls() []struct {
	Ctx  context.Context
	Tx   *bt.Tx
	Opts *models.OptsSignRawTransaction
} {
	var calls []struct {
		Ctx  context.Context
		Tx   *bt.Tx
		Opts *models.OptsSignRawTransaction
	}
	mock.lockSignRawTransaction.RLock()
	calls = mock.calls.SignRawTransaction
	mock.lockSignRawTransaction.RUnlock()
	return calls
}
